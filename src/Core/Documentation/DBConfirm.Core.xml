<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DBConfirm.Core</name>
    </assembly>
    <members>
        <member name="T:DBConfirm.Core.Attributes.ConnectionStringNameAttribute">
            <summary>
            Configures the connection string name to use for all tests within the class
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Attributes.ConnectionStringNameAttribute.#ctor(System.String)">
            <summary>
            Contructor, setting the connection string name to use for all tests within the class
            </summary>
            <param name="connectionStringName">The name of the connection string to use</param>
        </member>
        <member name="P:DBConfirm.Core.Attributes.ConnectionStringNameAttribute.ConnectionStringName">
            <summary>
            Gets the name of the connection string to use for all tests within the class
            </summary>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Abstract.IComparison">
            <summary>
            Defines the interface for comparison objects, to implement advanced assertion logic
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Abstract.IComparison.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <summary>
            Asserts that the comparison is met.  On failure, the test framework is used to trigger the failure
            </summary>
            <param name="testFramework">The test framework to be used for assertions</param>
            <param name="value">The value being tested</param>
            <param name="messagePrefix">The prefix of the message to be used in the failure message</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Abstract.IComparison.Validate(System.Object)">
            <summary>
            Validates that the comparison is met.  Instead of raising a failure, a boolean is returned
            </summary>
            <param name="value">The value being tested</param>
            <returns>Returns whether the valid is valid according to the comparison logic</returns>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Dates.Abstract.BaseDateTimeComparison">
            <summary>
            Abstract base class for DateTime comparisons.  Defines a default precision of 1 second
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Dates.Abstract.BaseDateTimeComparison.Precision">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.Abstract.BaseDateTimeComparison.#ctor">
            <summary>
            Protected constructor, using the default precision of 1 second
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.Abstract.BaseDateTimeComparison.#ctor(System.TimeSpan)">
            <summary>
            Protected constuctor, setting a custom precision
            </summary>
            <param name="precision">The precision to be used</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.Abstract.BaseDateTimeComparison.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.Abstract.BaseDateTimeComparison.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.Abstract.BaseDateTimeComparison.AssertDate(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.DateTime,System.DateTime,System.String)">
            <summary>
            Asserts that the comparison is met, within the bounds of the precision.  On failure, the test framework is used to trigger the failure
            </summary>
            <param name="testFramework">The test framework to be used for assertions</param>
            <param name="expectedDate">The expected date to be used in the comparison</param>
            <param name="value">The value being tested</param>
            <param name="message">The prefix of the message to be used in the failure message</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.Abstract.BaseDateTimeComparison.Validate(System.DateTime,System.DateTime)">
            <summary>
            Validates that the comparison is met.  Instead of raising a failure, a boolean is returned
            </summary>
            <param name="expectedDate">The expected date to be used in the comparison</param>
            <param name="value">The value being tested</param>
            <returns>Returns whether the valid is valid according to the comparison logic</returns>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Dates.Abstract.IDateComparison">
            <summary>
            The interface for date comparison objects
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Dates.Abstract.IDateComparison.Precision">
            <summary>
            Gets the precision to be used in the comparison
            </summary>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Dates.SpecificDate">
            <summary>
            Asserts that a value matches a specific date, ignoring the time of day.
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Dates.SpecificDate.Precision">
            <inheritdoc/>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Dates.SpecificDate.ExpectedDate">
            <summary>
            The expected date
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.SpecificDate.#ctor(System.DateTime)">
            <summary>
            Constructor, setting the expected date
            </summary>
            <param name="expectedDate">The expected date</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.SpecificDate.#ctor(System.String)">
            <summary>
            Constructor, setting the expected date
            </summary>
            <param name="expectedDate">The expected date, to be parsed with <see cref="M:System.DateTime.Parse(System.String)"/></param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.SpecificDate.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.SpecificDate.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Dates.SpecificDateTime">
            <summary>
            Asserts that a value matches a specific date and time.  The precision (default 1 second) is used to match values within a certain limit
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Dates.SpecificDateTime.ExpectedDate">
            <summary>
            The expected date
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.SpecificDateTime.#ctor(System.DateTime)">
            <summary>
            Constructor, setting the expected date
            </summary>
            <param name="expectedDate">The expected date</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.SpecificDateTime.#ctor(System.String)">
            <summary>
            Constructor, setting the expected date
            </summary>
            <param name="expectedDate">The expected date, to be parsed with <see cref="M:System.DateTime.Parse(System.String)"/></param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.SpecificDateTime.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Constructor, setting the expected date
            </summary>
            <param name="expectedDate">The expected date</param>
            <param name="precision">The precision to be used in the comparison</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.SpecificDateTime.#ctor(System.String,System.TimeSpan)">
            <summary>
            Constructor, setting the expected date
            </summary>
            <param name="expectedDate">The expected date, to be parsed with <see cref="M:System.DateTime.Parse(System.String)"/></param>
            <param name="precision">The precision to be used in the comparison</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.SpecificDateTime.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.SpecificDateTime.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Dates.UtcNowDate">
            <summary>
            Asserts that a value matches UtcNow.  The precision (default 1 second) is used to match values within a certain limit
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Dates.UtcNowDate.DateUtcNowFactory">
            <summary>
            The factory used to calculate UtcNow.  By default, this is using DateTime.UtcNow
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.UtcNowDate.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.UtcNowDate.#ctor(System.TimeSpan)">
            <summary>
            Constructor
            </summary>
            <param name="precision">The precision to be used in the comparison</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.UtcNowDate.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Dates.UtcNowDate.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.ExpectedData">
            <summary>
            Facade to build data comparison objects, used to test comparisons with more flexibility
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsNotNull">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for not-null values
            </summary>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsNull">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for null values
            </summary>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsUtcNow">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to be UtcNow, using the default precision of 1 second
            </summary>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsUtcNow(System.TimeSpan)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to be UtcNow, with a custom precision
            </summary>
            <param name="precision">The precision to be used in the comparison</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsDateTime(System.String)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to be a specific date, using the default precision of 1 second
            </summary>
            <param name="expectedDate">The expected date</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsDateTime(System.DateTime)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to be a specific date, using the default precision of 1 second
            </summary>
            <param name="expectedDate">The expected date</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsDateTime(System.String,System.TimeSpan)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to be a specific date, with a custom precision
            </summary>
            <param name="expectedDate">The expected date</param>
            <param name="precision">The precision to be used in the comparison</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsDateTime(System.DateTime,System.TimeSpan)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to be a specific date, with a custom precision
            </summary>
            <param name="expectedDate">The expected date</param>
            <param name="precision">The precision to be used in the comparison</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsDay(System.String)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to be a specific day (ignoring time), using the default precision of 1 second
            </summary>
            <param name="expectedDate">The expected date</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsDay(System.DateTime)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to be a specific day (ignoring time), with a custom precision
            </summary>
            <param name="expectedDate">The expected date</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.HasLength(System.Int32)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to be a specific length
            </summary>
            <param name="expectedLength">The expected length</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.MatchesRegex(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to match a specific regex
            </summary>
            <param name="expectedRegex">The expected regex</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.MatchesRegex(System.String)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to match a specific regex
            </summary>
            <param name="expectedRegex">The expected regex</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.NotMatchesRegex(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to not match a specific regex
            </summary>
            <param name="unexpectedRegex">The regex to not match</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.NotMatchesRegex(System.String)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to not match a specific regex
            </summary>
            <param name="unexpectedRegex">The regex to not match</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.StartsWith(System.String)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to start with a specific string  (case-sensitive)
            </summary>
            <param name="expected">The expected start string</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.EndsWith(System.String)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to sendtart with a specific string  (case-sensitive)
            </summary>
            <param name="expected">The expected end string</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.Contains(System.String)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to contain a specific string  (case-sensitive)
            </summary>
            <param name="expected">The expected contents</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.IsType(System.Type)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test for the data to match a specific type
            </summary>
            <param name="expectedType">The expected type</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.MatchesNumber(System.Int32)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test that the values numerically match
            </summary>
            <param name="expectedValue">The expected value</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.MatchesNumber(System.Int16)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test that the values numerically match
            </summary>
            <param name="expectedValue">The expected value</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.MatchesNumber(System.Int64)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test that the values numerically match
            </summary>
            <param name="expectedValue">The expected value</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.MatchesNumber(System.Decimal)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test that the values numerically match
            </summary>
            <param name="expectedValue">The expected value</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.MatchesNumber(System.Double)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test that the values numerically match
            </summary>
            <param name="expectedValue">The expected value</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.MatchesNumber(System.Single)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test that the values numerically match
            </summary>
            <param name="expectedValue">The expected value</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.ExpectedData.MatchesNumber(System.Byte)">
            <summary>
            Gets the <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object to test that the values numerically match
            </summary>
            <param name="expectedValue">The expected value</param>
            <returns>Returns the comparison object</returns>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Numeric.NumericValue">
            <summary>
            Asserts that a numeric value matches another, regardless of the actual types of the values
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Numeric.NumericValue.ExpectedValue">
            <summary>
            The expected value
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Numeric.NumericValue.#ctor(System.Int32)">
            <summary>
            Constructor, setting the expected value
            </summary>
            <param name="expectedValue">The expected value</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Numeric.NumericValue.#ctor(System.Int16)">
            <summary>
            Constructor, setting the expected value
            </summary>
            <param name="expectedValue">The expected value</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Numeric.NumericValue.#ctor(System.Int64)">
            <summary>
            Constructor, setting the expected value
            </summary>
            <param name="expectedValue">The expected value</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Numeric.NumericValue.#ctor(System.Decimal)">
            <summary>
            Constructor, setting the expected value
            </summary>
            <param name="expectedValue">The expected value</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Numeric.NumericValue.#ctor(System.Double)">
            <summary>
            Constructor, setting the expected value
            </summary>
            <param name="expectedValue">The expected value</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Numeric.NumericValue.#ctor(System.Single)">
            <summary>
            Constructor, setting the expected value
            </summary>
            <param name="expectedValue">The expected value</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Numeric.NumericValue.#ctor(System.Byte)">
            <summary>
            Constructor, setting the expected value
            </summary>
            <param name="expectedValue">The expected value</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Numeric.NumericValue.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Numeric.NumericValue.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.States.NotNullState">
            <summary>
            Asserts that a value is not null
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.States.NotNullState.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.States.NotNullState.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.States.NullState">
            <summary>
            Asserts that a value is null
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.States.NullState.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.States.NullState.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Strings.Contains">
            <summary>
            Asserts that a value contains a specific string (case-sensitive)
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Strings.Contains.Expected">
            <summary>
            The expected string
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.Contains.#ctor(System.String)">
            <summary>
            Constructor, setting the expected string
            </summary>
            <param name="expected">The expected contents</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.Contains.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.Contains.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Strings.EndsWith">
            <summary>
            Asserts that a value ends with a specific string (case-sensitive)
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Strings.EndsWith.Expected">
            <summary>
            The expected end string
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.EndsWith.#ctor(System.String)">
            <summary>
            Constructor, setting the expected end string
            </summary>
            <param name="expected">The expected end string</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.EndsWith.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.EndsWith.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Strings.MatchRegex">
            <summary>
            Asserts that a value matches a regex pattern
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Strings.MatchRegex.ExpectedRegex">
            <summary>
            The expected regex
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.MatchRegex.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Constructor, setting the expected regex
            </summary>
            <param name="expectedRegex">The expected regex</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.MatchRegex.#ctor(System.String)">
            <summary>
            Constructor, setting the expected regex
            </summary>
            <param name="expectedRegex">The expected regex</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.MatchRegex.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.MatchRegex.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Strings.NoMatchRegex">
            <summary>
            Asserts that a value does not match a regex pattern
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Strings.NoMatchRegex.UnexpectedRegex">
            <summary>
            The regex to not match
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.NoMatchRegex.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Constructor, setting the regex to not match
            </summary>
            <param name="unexpectedRegex">The regex to not match</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.NoMatchRegex.#ctor(System.String)">
            <summary>
            Constructor, setting the regex to not match
            </summary>
            <param name="unexpectedRegex">The regex to not match</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.NoMatchRegex.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.NoMatchRegex.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Strings.SpecificLength">
            <summary>
            Asserts that a string is of a specific length
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Strings.SpecificLength.ExpectedLength">
            <summary>
            The expected length
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.SpecificLength.#ctor(System.Int32)">
            <summary>
            Constructor, setting the expected length
            </summary>
            <param name="expectedLength">The expected length</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.SpecificLength.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.SpecificLength.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Strings.StartsWith">
            <summary>
            Asserts that a value starts with a specific string (case-sensitive)
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Strings.StartsWith.Expected">
            <summary>
            The expected start string
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.StartsWith.#ctor(System.String)">
            <summary>
            Constructor, setting the expected start string
            </summary>
            <param name="expected">The expected start string</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.StartsWith.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Strings.StartsWith.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Comparisons.Types.MatchType">
            <summary>
            Asserts that a value is of a specific type
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Comparisons.Types.MatchType.ExpectedType">
            <summary>
            The expected type
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Types.MatchType.#ctor(System.Type)">
            <summary>
            Constructor, setting the expected type
            </summary>
            <param name="expectedType">The expected type</param>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Types.MatchType.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Comparisons.Types.MatchType.Validate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.DataResults.ErrorResult">
            <summary>
            The data for a specific error
            </summary>
        </member>
        <member name="P:DBConfirm.Core.DataResults.ErrorResult.RawData">
            <summary>
            The details of the thrown error
            </summary>
        </member>
        <member name="F:DBConfirm.Core.DataResults.ErrorResult.TestFramework">
            <summary>
            The test framework to use for assertions
            </summary>
        </member>
        <member name="M:DBConfirm.Core.DataResults.ErrorResult.#ctor(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Exception)">
            <summary>
            Constructor, including the test framework and the error data
            </summary>
            <param name="testFramework">The test framework to use for assertions</param>
            <param name="rawData">The error returned from the query execution</param>
        </member>
        <member name="M:DBConfirm.Core.DataResults.ErrorResult.AssertError">
            <summary>
            Asserts that an error was found
            </summary>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.ErrorResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.ErrorResult.AssertMessage(System.Object)">
            <summary>
            Asserts that the error message matches the expected value.  If no error has been found, this assertion will fail
            </summary>
            <param name="expectedValue">The expected message.  Respects <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> objects</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.ErrorResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.ErrorResult.AssertType(System.Type)">
            <summary>
            Asserts that the error type matches the expected type.  If no error has been found, this assertion will fail
            </summary>
            <param name="expectedType">The expected type</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.ErrorResult"/> object</returns>
        </member>
        <member name="T:DBConfirm.Core.DataResults.QueryResult">
            <summary>
            The results of a query execution, representing the data returned
            </summary>
        </member>
        <member name="P:DBConfirm.Core.DataResults.QueryResult.RawData">
            <summary>
            The data returned from the query execution
            </summary>
        </member>
        <member name="F:DBConfirm.Core.DataResults.QueryResult.TestFramework">
            <summary>
            The test framework to use for assertions
            </summary>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.#ctor(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework)">
            <summary>
            Constructor, including the test framework to use
            </summary>
            <param name="testFramework">The test framework to use for assertions</param>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.#ctor(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Data.DataTable)">
            <summary>
            Constructor, including the test framework to use and the query result data
            </summary>
            <param name="testFramework">The test framework to use for assertions</param>
            <param name="rawData">The data returned from the query execution</param>
        </member>
        <member name="P:DBConfirm.Core.DataResults.QueryResult.TotalRows">
            <summary>
            The total number of rows in the data set
            </summary>
        </member>
        <member name="P:DBConfirm.Core.DataResults.QueryResult.TotalColumns">
            <summary>
            The total number of columns in the data set
            </summary>
        </member>
        <member name="P:DBConfirm.Core.DataResults.QueryResult.ColumnNames">
            <summary>
            The collection of columns in the data set, in the order they appear in the data set
            </summary>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertRowCount(System.Int32)">
            <summary>
            Asserts the number of rows
            </summary>
            <param name="expected">The expected number of rows</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertColumnCount(System.Int32)">
            <summary>
            Asserts the number of columns
            </summary>
            <param name="expected">The expected number of columns</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertColumnExists(System.String)">
            <summary>
            Asserts that a specific column exists in the data set
            </summary>
            <param name="expectedColumnName">The column name (case-sensitive)</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertColumnNotExists(System.String)">
            <summary>
            Asserts that a specific column does not exist in the data set
            </summary>
            <param name="notExpectedColumnName">The column name (case-sensitive)</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertColumnsExist(System.String[])">
            <summary>
            Asserts that a number of columns all exist in the data set
            </summary>
            <param name="expectedColumnNames">The column names (case-sensitive)</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertColumnsNotExist(System.String[])">
            <summary>
            Asserts that a number of columns all do not exist in the data set
            </summary>
            <param name="notExpectedColumnNames">The column names (case-sensitive)</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertColumnValuesUnique(System.String[])">
            <summary>
            Asserts that the data across the selected columns is unique
            </summary>
            <param name="uniqueColumnNames">The column names (case-sensitive).  Duplicates are ignored</param>
            <remarks>If multiple columns are selected, then uniqueness is determined by checking the data in all columns, not each column individually</remarks>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertRowPositionExists(System.Int32)">
            <summary>
            Asserts that a row exists at a specific position (zero-based)
            </summary>
            <param name="expectedRowPosition">The row position (zero-based)</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertValue(System.Int32,System.String,System.Object)">
            <summary>
            Asserts that a specific value exists for the given row and column.  Also asserts that the row and column exists
            </summary>
            <param name="rowNumber">The row number (zero-based)</param>
            <param name="columnName">The column name (case-sensitive)</param>
            <param name="expectedValue">The expected value.  Respects <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> objects</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.ValidateRow(System.Int32)">
            <summary>
            Returns a <see cref="T:DBConfirm.Core.DataResults.RowResult"/> object, representing the specific row on which further assertions can be made.  Validates that the row number exists in the data set
            </summary>
            <param name="rowNumber">The row number (zero-based)</param>
            <returns>Returns the <see cref="T:DBConfirm.Core.DataResults.RowResult"/> for the row</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertRowValues(System.Int32,DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Asserts that the row at the given position matches the expected data.  Also asserts that all columns in the expected data exist
            </summary>
            <param name="rowNumber">The row number (zero-based)</param>
            <param name="expectedData">The expected data to match.  Respects <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> objects</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertRowExists(DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Asserts that at least one row matches the expected data.  Also asserts that all columns in the expected data exist
            </summary>
            <param name="expectedData">The expected data to match.  Respects <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> objects</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.AssertRowDoesNotExist(DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Asserts that no rows match the supplied data.  Also asserts that all columns in the supplied data exist
            </summary>
            <param name="unexpectedData">The unexpected data.  Respects <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> objects</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.GetRow(System.Int32)">
            <summary>
            Gets the data row for the specific position, after asserting that the row position exists
            </summary>
            <param name="rowNumber">The row number (zero-based)</param>
            <returns>Returns the data row</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.GetRowIfPossible(System.Int32)">
            <summary>
            Gets the data row for the specific position, if the row exists.  If it doesn't exist, null is returned
            </summary>
            <param name="rowNumber">The row number (zero-based)</param>
            <returns>Returns the data row, or null if the row isn't found</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.QueryResult.CheckColumnExists(System.String)">
            <summary>
            Checks that a specific column exists in the data set, returning a boolean as the result
            </summary>
            <param name="expectedColumnName">The column name (case-sensitive)</param>
            <returns>Returns a boolean indicating whether the column exists</returns>
        </member>
        <member name="T:DBConfirm.Core.DataResults.RowResult">
            <summary>
            The data for a specific row
            </summary>
        </member>
        <member name="M:DBConfirm.Core.DataResults.RowResult.#ctor(DBConfirm.Core.DataResults.QueryResult,System.Int32)">
            <summary>
            Constructor, setting the parent <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> and row number (zero-based).  Validates that the row number exists in the parent data set
            </summary>
            <param name="queryResult">The parent <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object.  Must not be null</param>
            <param name="rowNumber">The row number (zero-based)</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DBConfirm.Core.DataResults.RowResult.#ctor(DBConfirm.Core.DataResults.QueryResult,System.Int32,System.Boolean)">
            <summary>
            Constructor, setting the parent <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> and row number (zero-based).  Validates that the row number exists in the parent data set
            </summary>
            <param name="queryResult">The parent <see cref="T:DBConfirm.Core.DataResults.QueryResult"/> object.  Must not be null</param>
            <param name="rowNumber">The row number (zero-based)</param>
            <param name="skipValidation">Whether the validation should be skipped</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DBConfirm.Core.DataResults.RowResult.AssertValue(System.String,System.Object)">
            <summary>
            Asserts that a specific value exists for the given column.  Also asserts that the column exists
            </summary>
            <param name="columnName">The column name (case-sensitive)</param>
            <param name="expectedValue">The expected value.  Respects <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> objects</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.RowResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.RowResult.AssertValues(DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Asserts that the row matches the expected data.  Also asserts that all columns in the expected data exist
            </summary>
            <param name="expectedData">The expected data to match.  Respects <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> objects</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.RowResult"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.RowResult.ValidateRow(System.Int32)">
            <summary>
            Returns a <see cref="T:DBConfirm.Core.DataResults.RowResult"/> object, representing the specific row on which further assertions can be made.  Validates that the row number exists in the parent data set
            </summary>
            <param name="rowNumber">The row number (zero-based)</param>
            <returns>Returns the <see cref="T:DBConfirm.Core.DataResults.RowResult"/> for the row</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.RowResult.ValidateValuesMatch(DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Validates whether the values match the row, returning a boolean representing the result
            </summary>
            <param name="expectedData">The expected data to match.  Respects <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> objects</param>
            <returns>Returns whether the values match the current row</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.RowResult.DoValuesMatch(DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Checks that the row matches the expected data, returning a boolean as the result instead of failing the test
            </summary>
            <param name="expectedData">The expected data to match.  Respects <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> objects</param>
            <returns>Returns a boolean indicating if the values match</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.RowResult.Get(System.String)">
            <summary>
            Gets the value in a specific column
            </summary>
            <param name="columnName">The column name (case-sensitive)</param>
            <returns>The object in the column</returns>
        </member>
        <member name="M:DBConfirm.Core.DataResults.RowResult.GetRowNumber">
            <summary>
            Gets the current row number (0-based)
            </summary>
            <returns>Returns the row number (0-based)</returns>
        </member>
        <member name="T:DBConfirm.Core.DataResults.ScalarResult`1">
            <summary>
            The data for a specific object
            </summary>
            <typeparam name="T">The type of the data</typeparam>
        </member>
        <member name="P:DBConfirm.Core.DataResults.ScalarResult`1.RawData">
            <summary>
            The value of the result
            </summary>
        </member>
        <member name="F:DBConfirm.Core.DataResults.ScalarResult`1.TestFramework">
            <summary>
            The test framework to use for assertions
            </summary>
        </member>
        <member name="M:DBConfirm.Core.DataResults.ScalarResult`1.#ctor(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,`0)">
            <summary>
            Constructor, including the test framework and the query result data
            </summary>
            <param name="testFramework">The test framework to use for assertions</param>
            <param name="rawData">The data returned from the query execution</param>
        </member>
        <member name="M:DBConfirm.Core.DataResults.ScalarResult`1.AssertValue(System.Object)">
            <summary>
            Asserts that the value matches the expected value
            </summary>
            <param name="expectedValue">The expected value.  Respects <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> objects</param>
            <returns>Returns the same <see cref="T:DBConfirm.Core.DataResults.ScalarResult`1"/> object</returns>
        </member>
        <member name="T:DBConfirm.Core.Data.DataSetRow">
            <summary>
            Defines the data for a single row, in a single table
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Data.DataSetRow.Item(System.String)">
            <summary>
            Gets or sets the value for a specific column
            </summary>
            <param name="columnName">The name of the column</param>
            <returns>Returns the data stored for the column, or an exception if the column does not exist</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the column is not found in the data set</exception>
        </member>
        <member name="M:DBConfirm.Core.Data.DataSetRow.#ctor">
            <summary>
            Default constructor, instantiating with an empty data set
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Data.DataSetRow.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor, instantiating with an existing dictionary of values
            </summary>
            <param name="data">The data used to instantiate the row.  The Key relates to the column name, and the Value relates to the column value</param>
        </member>
        <member name="M:DBConfirm.Core.Data.DataSetRow.ToString">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Data.DataSetRow.Merge(DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Merges the existing row data with a new data set, returning the resulting merge.  The two existing data sets are not changed by this merge.
            </summary>
            <param name="dictionary">The new data set to merge with</param>
            <returns>Returns a single data set, representing the merge of the two data sets</returns>
        </member>
        <member name="M:DBConfirm.Core.Data.DataSetRow.Apply(DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Applies all values within the supplied <see cref="T:DBConfirm.Core.Data.DataSetRow"/> to the current <see cref="T:DBConfirm.Core.Data.DataSetRow"/>, overwriting all keys
            </summary>
            <param name="dictionary">The new data set to apply from</param>
        </member>
        <member name="M:DBConfirm.Core.Data.DataSetRow.Copy">
            <summary>
            Copies the <see cref="T:DBConfirm.Core.Data.DataSetRow"/> to a new instance.  Uses a shallow copy.
            </summary>
            <returns>Returns the copied <see cref="T:DBConfirm.Core.Data.DataSetRow"/></returns>
        </member>
        <member name="T:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException">
            <summary>
            The exception that is thrown when a required placeholder has not been replaced by a value
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException.ColumnName">
            <summary>
            The name of the required column missing a value
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException.TableName">
            <summary>
            The name of the table missing a value
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException.#ctor">
            <summary>
            Initializes a new instance of the RequiredPlaceholderIsNullException class
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RequiredPlaceholderIsNullException class with the name of the column missing a value
            </summary>
            <param name="columnName">The name of the column missing a value</param>
        </member>
        <member name="M:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the RequiredPlaceholderIsNullException class with a specified error message and the exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for this exception</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RequiredPlaceholderIsNullException class with the name of the column and table missing a value
            </summary>
            <param name="columnName">The name of the column missing a value</param>
            <param name="tableName">The name of the table missing a value</param>
        </member>
        <member name="M:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the RequiredPlaceholderIsNullException class with a specified error message and the exception that is the cause of this exception, and the name of the column missing a value
            </summary>
            <param name="message">The error message that explains the reason for this exception</param>
            <param name="columnName">The name of the column missing a value</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the RequiredPlaceholderIsNullException class with serialized data
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">An object that describes the source or destination of the serialized data</param>
        </member>
        <member name="M:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException.ToString">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Exceptions.RequiredPlaceholderIsNullException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Factories.Abstract.IDateUtcNowFactory">
            <summary>
            The interface for UtcNow factories, to retrieve a value for UtcNow depending on the factory logic
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Factories.Abstract.IDateUtcNowFactory.UtcNow">
            <summary>
            Gets the value of UtcNow, according to the factory logic
            </summary>
        </member>
        <member name="T:DBConfirm.Core.Factories.Abstract.ITestRunnerFactory">
            <summary>
            The interface for ITestRunner factories, to generate a new instance of <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/> according to the factory logic
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Factories.Abstract.ITestRunnerFactory.BuildTestRunner(System.String)">
            <summary>
            Gets an instantiation of <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/>, according to the factory logic
            </summary>
            <param name="connectionString">The connection string to use for SQL connections</param>
            <returns>Returns the generated <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/></returns>
        </member>
        <member name="T:DBConfirm.Core.Factories.DateUtcNowFactory">
            <summary>
            The default UtcNow factory, using <see cref="P:System.DateTime.UtcNow"/>
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Factories.DateUtcNowFactory.UtcNow">
            <summary>
            Gets the value of UtcNow, using <see cref="P:System.DateTime.UtcNow"/>
            </summary>
        </member>
        <member name="T:DBConfirm.Core.Parameters.SqlQueryParameter">
            <summary>
            Defines a parameter to be used during SQL execution
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Parameters.SqlQueryParameter.ParameterName">
            <summary>
            Gets or sets the name of the parameter
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Parameters.SqlQueryParameter.Value">
            <summary>
            Gets or sets the parameter value
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Parameters.SqlQueryParameter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Parameters.SqlQueryParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructor, with parameter name and value
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="value">The parameter value</param>
        </member>
        <member name="T:DBConfirm.Core.Runners.Abstract.ITestRunner">
            <summary>
            The interface for the test runner, handling all SQL connections for a single database
            </summary>
            <remarks>When communicating with a database multiple times within a single test, the same test runner instance must be used</remarks>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.InitialiseAsync(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework)">
            <summary>
            Sets up the test runner, based on the specified test framework.  This also opens the connection to the database, and starts the transaction to be used throughout the test
            </summary>
            <param name="testFramework">The test framework to be used for assertions</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.CountRowsInTableAsync(System.String)">
            <summary>
            Returns the total number of rows in the table
            </summary>
            <param name="tableName">The name of the table, including schema</param>
            <returns>Returns the total number of rows</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.CountRowsInViewAsync(System.String)">
            <summary>
            Returns the total number of rows in the view
            </summary>
            <param name="viewName">The name of the view, including schema</param>
            <returns>Returns the total number of rows</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteCommandAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command, returning a single data table
            </summary>
            <param name="commandText">The command to execute</param>
            <param name="parameters">The parameters to be used.  The Key is used as the parameter name, and the Value used as the parameter value</param>
            <returns>Where the command returns a data set, the first table is returned, otherwise an empty data set is returned</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteCommandAsync(System.String,DBConfirm.Core.Parameters.SqlQueryParameter[])">
            <summary>
            Executes a command, returning a single data table
            </summary>
            <param name="commandText">The command to execute</param>
            <param name="parameters">The parameters to be used</param>
            <returns>Where the command returns a data set, the first table is returned, otherwise an empty data set is returned</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteCommandMultipleDataSetAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command, returning all data tables
            </summary>
            <param name="commandText">The command to execute</param>
            <param name="parameters">The parameters to be used.  The Key is used as the parameter name, and the Value used as the parameter value</param>
            <returns>Returns all tables returned from the command</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteCommandMultipleDataSetAsync(System.String,DBConfirm.Core.Parameters.SqlQueryParameter[])">
            <summary>
            Executes a command, returning all data tables
            </summary>
            <param name="commandText">The command to execute</param>
            <param name="parameters">The parameters to be used</param>
            <returns>Returns all tables returned from the command</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteCommandNoResultsAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command, returning no data
            </summary>
            <param name="commandText">The command to execute</param>
            <param name="parameters">The parameters to be used.  The Key is used as the parameter name, and the Value used as the parameter value</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteCommandNoResultsAsync(System.String,DBConfirm.Core.Parameters.SqlQueryParameter[])">
            <summary>
            Executes a command, returning no data
            </summary>
            <param name="commandText">The command to execute</param>
            <param name="parameters">The parameters to be used</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteCommandScalarAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command, returning a single object
            </summary>
            <param name="commandText">The command to execute</param>
            <param name="parameters">The parameters to be used.  The Key is used as the parameter name, and the Value used as the parameter value</param>
            <typeparam name="T">The type of the object to return</typeparam>
            <returns>Returns the object returned from the command</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteCommandScalarAsync``1(System.String,DBConfirm.Core.Parameters.SqlQueryParameter[])">
            <summary>
            Executes a command, returning a single object
            </summary>
            <param name="commandText">The command to execute</param>
            <param name="parameters">The parameters to be used</param>
            <typeparam name="T">The type of the object to return</typeparam>
            <returns>Returns the object returned from the command</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteCommandErrorAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command, returning the found error
            </summary>
            <param name="commandText">The command to execute</param>
            <param name="parameters">The parameters to be used.  The Key is used as the parameter name, and the Value used as the parameter value</param>
            <returns>Returns the error returned from the command. If no error is found, then the RawData within the ErrorResult object will be null</returns>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteCommandErrorAsync(System.String,DBConfirm.Core.Parameters.SqlQueryParameter[])">
            <summary>
            Executes a command, returning the found error
            </summary>
            <param name="commandText">The command to execute</param>
            <param name="parameters">The parameters to be used</param>
            <returns>Returns the error returned from the command. If no error is found, then the RawData within the ErrorResult object will be null</returns>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteStoredProcedureMultipleDataSetAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a stored procedure, returning all data tables
            </summary>
            <param name="procedureName">The name of the stored procedure, including schema</param>
            <param name="parameters">The parameters to be used.  The Key is used as the parameter name, and the Value used as the parameter value</param>
            <returns>Returns all tables returned from the stored procedure</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteStoredProcedureMultipleDataSetAsync(System.String,DBConfirm.Core.Parameters.SqlQueryParameter[])">
            <summary>
            Executes a stored procedure, returning all data tables
            </summary>
            <param name="procedureName">The name of the stored procedure, including schema</param>
            <param name="parameters">The parameters to be used</param>
            <returns>Returns all tables returned from the stored procedure</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteStoredProcedureNonQueryAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a stored procedure, returning nothing
            </summary>
            <param name="procedureName">The name of the stored procedure, including schema</param>
            <param name="parameters">The parameters to be used.  The Key is used as the parameter name, and the Value used as the parameter value</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteStoredProcedureNonQueryAsync(System.String,DBConfirm.Core.Parameters.SqlQueryParameter[])">
            <summary>
            Executes a stored procedure, returning nothing
            </summary>
            <param name="procedureName">The name of the stored procedure, including schema</param>
            <param name="parameters">The parameters to be used</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteStoredProcedureQueryAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a stored procedure, returning a single data table
            </summary>
            <param name="procedureName">The name of the stored procedure, including schema</param>
            <param name="parameters">The parameters to be used.  The Key is used as the parameter name, and the Value used as the parameter value</param>
            <returns>Where the stored procedure returns a data set, the first table is returned, otherwise an empty data set is returned</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteStoredProcedureQueryAsync(System.String,DBConfirm.Core.Parameters.SqlQueryParameter[])">
            <summary>
            Executes a stored procedure, returning a single data table
            </summary>
            <param name="procedureName">The name of the stored procedure, including schema</param>
            <param name="parameters">The parameters to be used</param>
            <returns>Where the stored procedure returns a data set, the first table is returned, otherwise an empty data set is returned</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteStoredProcedureScalarAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a stored procedure, returning a single object
            </summary>
            <param name="procedureName">The name of the stored procedure, including schema</param>
            <param name="parameters">The parameters to be used.  The Key is used as the parameter name, and the Value used as the parameter value</param>
            <typeparam name="T">The type of the object to return</typeparam>
            <returns>Returns the object returned from the stored procedure</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteStoredProcedureScalarAsync``1(System.String,DBConfirm.Core.Parameters.SqlQueryParameter[])">
            <summary>
            Executes a stored procedure, returning a single object
            </summary>
            <param name="procedureName">The name of the stored procedure, including schema</param>
            <param name="parameters">The parameters to be used</param>
            <typeparam name="T">The type of the object to return</typeparam>
            <returns>Returns the object returned from the stored procedure</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteStoredProcedureErrorAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a stored procedure, returning the found error
            </summary>
            <param name="procedureName">The name of the stored procedure, including schema</param>
            <param name="parameters">The parameters to be used.  The Key is used as the parameter name, and the Value used as the parameter value</param>
            <returns>Returns the error returned from the stored procedure. If no error is found, then the RawData within the ErrorResult object will be null</returns>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteStoredProcedureErrorAsync(System.String,DBConfirm.Core.Parameters.SqlQueryParameter[])">
            <summary>
            Executes a stored procedure, returning the found error
            </summary>
            <param name="procedureName">The name of the stored procedure, including schema</param>
            <param name="parameters">The parameters to be used</param>
            <returns>Returns the error returned from the stored procedure. If no error is found, then the RawData within the ErrorResult object will be null</returns>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteTableAsync(System.String)">
            <summary>
            Returns all data for a specific table
            </summary>
            <param name="tableName">The name of the table, including schema</param>
            <returns>Returns all columns and values found</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.ExecuteViewAsync(System.String)">
            <summary>
            Returns all data for a specific view
            </summary>
            <param name="viewName">The name of the view, including schema</param>
            <returns>Returns all columns and values found</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.InsertDefaultAsync(System.String)">
            <summary>
            Inserts the default data into a table.  This can be used to insert a row into a table that only contains an Identity column, and the next Identity value is to be used
            </summary>
            <remarks>Where the table has an identity column, and is not set as part of the input data, then the identity value used is added to the returned data set</remarks>
            <param name="tableName">The name of the table to insert into, including schema</param>
            <returns>Returns the data inserted, including the identity value (if applicable)</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.InsertDataAsync(System.String,DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Inserts data into a table
            </summary>
            <remarks>Where the table has an identity column, and is not set as part of the input data, then the identity value used is added to the returned data set</remarks>
            <param name="tableName">The name of the table to insert into, including schema</param>
            <param name="data">The data to insert</param>
            <returns>Returns the data inserted, including the identity value (if applicable)</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.InsertDataAsync(System.String,DBConfirm.Core.Data.DataSetRow,DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Inserts data into a table
            </summary>
            <remarks>Where the table has an identity column, and is not set as part of the input data, then the identity value used is added to the returned data set.  Data from both <paramref name="defaultData"/> and <paramref name="overrideData"/> is used, however where the same columns are specified in both data sets, then the value in <paramref name="overrideData"/> is used</remarks>
            <param name="tableName">The name of the table to insert into, including schema</param>
            <param name="defaultData">The default data to insert</param>
            <param name="overrideData">The data to insert, overriding the data provided in <paramref name="defaultData"/></param>
            <returns>Returns the data inserted, including the identity value (if applicable)</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.InsertTemplateAsync``1">
            <summary>
            Inserts data based on the default values defined in the template
            </summary>
            <remarks>Where the table has an identity column, and is not set as part of the input data, then the identity value used is added to the returned data set</remarks>
            <typeparam name="T">The type of template to insert</typeparam>
            <returns>Returns the template object, including the identity value (if applicable)</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.InsertTemplateAsync``1(``0)">
            <summary>
            Inserts data based on the supplied template
            </summary>
            <remarks>Where the table has an identity column, and is not set as part of the input data, then the identity value used is added to the returned data set</remarks>
            <typeparam name="T">The type of template to insert</typeparam>
            <param name="template">The template containing the data to add</param>
            <returns>Returns the template object, including the identity value (if applicable)</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.InsertTemplateAsync(DBConfirm.Core.Templates.Abstract.ITemplate)">
            <summary>
            Inserts data based on the supplied template
            </summary>
            <remarks>Where the table has an identity column, and is not set as part of the input data, then the identity value used is added to the returned data set</remarks>
            <param name="template">The template containing the data to add</param>
            <returns>Returns the template object, including the identity value (if applicable)</returns>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:DBConfirm.Core.Runners.Abstract.ITestRunner.GenerateNextIdentity">
            <summary>
            Generates the next identity, unique to the test
            </summary>
            <returns>Returns the next identity value</returns>
        </member>
        <member name="T:DBConfirm.Core.Templates.Abstract.IResolver">
            <summary>
            The interface for a deferred action
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Templates.Abstract.IResolver.Resolve">
            <summary>
            Resolves the action to return the resulting object
            </summary>
            <returns>Returns the resulting object</returns>
        </member>
        <member name="T:DBConfirm.Core.Templates.Abstract.ISimpleTemplate">
            <summary>
            The interface for templates that relate to a single table
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Templates.Abstract.ISimpleTemplate.TableName">
            <summary>
            Gets the name of the table
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Templates.Abstract.ISimpleTemplate.CustomData">
            <summary>
            Gets the custom data set for the template
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Templates.Abstract.ISimpleTemplate.DefaultData">
            <summary>
            Gets the default data set for the template
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Templates.Abstract.ISimpleTemplate.MergedData">
            <summary>
            Gets the result of the default and custom data merged together
            </summary>
        </member>
        <member name="T:DBConfirm.Core.Templates.Abstract.ITemplate">
            <summary>
            The interface for a template, used to set up precondition data in the target database
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Templates.Abstract.ITemplate.IsInserted">
            <summary>
            Gets whether the template has been executed and inserted into the target database
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Templates.Abstract.ITemplate.RecordInsertion">
            <summary>
            Records that the template has been executed and inserted into the target database
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Templates.Abstract.ITemplate.InsertAsync(DBConfirm.Core.Runners.Abstract.ITestRunner)">
            <summary>
            Inserts the template data into the target database
            </summary>
            <param name="testRunner">The test runner used for the connection to the target database</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="T:DBConfirm.Core.Templates.BaseComplexTemplate">
            <summary>
            The abstract template class used as the base for complex templates.  Complex templates are used to build templates that insert data into multiple tables, including setting foreign keys
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Templates.BaseComplexTemplate.IsInserted">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Templates.BaseComplexTemplate.RecordInsertion">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Templates.BaseComplexTemplate.GetNextIdentity">
            <summary>
            Generates the next identity for the test
            </summary>
            <returns>Returns the next identity value</returns>
        </member>
        <member name="M:DBConfirm.Core.Templates.BaseComplexTemplate.InsertAsync(DBConfirm.Core.Runners.Abstract.ITestRunner)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Templates.BaseIdentityTemplate`1">
            <summary>
            The abstract template class used as the base for simple templates for tables that have an identity column
            </summary>
            <typeparam name="T">The type of the current template object</typeparam>
        </member>
        <member name="P:DBConfirm.Core.Templates.BaseIdentityTemplate`1.IdentityColumnName">
            <summary>
            Gets the name of the identity column
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Templates.BaseIdentityTemplate`1.Identity">
            <summary>
            Gets the current value of the identity column, either explicitly set or set during <see cref="M:DBConfirm.Core.Templates.Abstract.ITemplate.InsertAsync(DBConfirm.Core.Runners.Abstract.ITestRunner)"/>
            </summary>
        </member>
        <member name="P:DBConfirm.Core.Templates.BaseIdentityTemplate`1.IdentityResolver">
            <summary>
            Gets the resolver object, which, when resolved, returns the value of the identity column
            </summary>
            <remarks>This can be used to reference the identity value before <see cref="M:DBConfirm.Core.Templates.Abstract.ITemplate.InsertAsync(DBConfirm.Core.Runners.Abstract.ITestRunner)"/> has been executed</remarks>
        </member>
        <member name="T:DBConfirm.Core.Templates.BaseSimpleTemplate`1">
            <summary>
            The abstract template class used as the base for simple templates.  Simple templates are used to set up data in a single table
            </summary>
            <typeparam name="T">The type of the current template object</typeparam>
        </member>
        <member name="P:DBConfirm.Core.Templates.BaseSimpleTemplate`1.TableName">
            <inheritdoc/>
        </member>
        <member name="P:DBConfirm.Core.Templates.BaseSimpleTemplate`1.CustomData">
            <inheritdoc/>
        </member>
        <member name="P:DBConfirm.Core.Templates.BaseSimpleTemplate`1.DefaultData">
            <inheritdoc/>
        </member>
        <member name="P:DBConfirm.Core.Templates.BaseSimpleTemplate`1.IsInserted">
            <inheritdoc/>
        </member>
        <member name="P:DBConfirm.Core.Templates.BaseSimpleTemplate`1.MergedData">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Templates.BaseSimpleTemplate`1.#ctor">
            <summary>
            Constructor, setting no custom data
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Templates.BaseSimpleTemplate`1.#ctor(DBConfirm.Core.Data.DataSetRow)">
            <summary>
            Constructor, with custom data
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Templates.BaseSimpleTemplate`1.RecordInsertion">
            <inheritdoc/>
        </member>
        <member name="M:DBConfirm.Core.Templates.BaseSimpleTemplate`1.SetValue(System.String,System.Object)">
            <summary>
            Sets a value in the custom data set
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="value">The value to set</param>
            <returns>Returns the current <typeparamref name="T"/> object</returns>
        </member>
        <member name="M:DBConfirm.Core.Templates.BaseSimpleTemplate`1.InsertAsync(DBConfirm.Core.Runners.Abstract.ITestRunner)">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.Templates.CustomIdentityService">
            <summary>
            A service to generate a unique identity for the test
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Templates.CustomIdentityService.GenerateNextIdentity">
            <summary>
            Generates the next identity
            </summary>
            <returns>Returns the next identity value</returns>
        </member>
        <member name="T:DBConfirm.Core.Templates.Placeholders.Placeholders">
            <summary>
            Facade to build placeholder objects, used to configure how specific columns should behave
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Templates.Placeholders.Placeholders.IsRequired">
            <summary>
            Returns a <see cref="T:DBConfirm.Core.Templates.Placeholders.RequiredPlaceholder"/> to indicate that the column needs to have a value populated before the template can be executed
            </summary>
            <returns></returns>
        </member>
        <member name="T:DBConfirm.Core.Templates.Placeholders.RequiredPlaceholder">
            <summary>
            Indicates that a column needs to have a value populated before the template can be executed
            </summary>
        </member>
        <member name="T:DBConfirm.Core.Templates.Resolver`1">
            <summary>
            A deferred action, which only evaluates the result when the <see cref="M:DBConfirm.Core.Templates.Resolver`1.Resolve"/> method is called
            </summary>
            <typeparam name="T">The type of the resolved object</typeparam>
        </member>
        <member name="P:DBConfirm.Core.Templates.Resolver`1.Function">
            <summary>
            Gets the function which is evaluated during <see cref="M:DBConfirm.Core.Templates.Resolver`1.Resolve"/>
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Templates.Resolver`1.#ctor(System.Func{`0})">
            <summary>
            Constructor, including the function to be evaluated during <see cref="M:DBConfirm.Core.Templates.Resolver`1.Resolve"/>
            </summary>
            <param name="function">The function to be evaluated</param>
        </member>
        <member name="M:DBConfirm.Core.Templates.Resolver`1.Resolve">
            <inheritdoc/>
        </member>
        <member name="T:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase">
            <summary>
            The abstract framework-agnostic base class for test classes, used to manage the <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/> instance
            </summary>
        </member>
        <member name="P:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase.ParameterName">
            <summary>
            The name of the parameter to use for finding the connection string.  
            </summary>
            <remarks>The tests will search for a connection string in environment variables, 
            TestContext and appsettings.json that matches this name</remarks>
        </member>
        <member name="F:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase.TestRunner">
            <summary>
            The current instance of <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/>
            </summary>
        </member>
        <member name="P:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase.TestRunnerFactory">
            <summary>
            The <see cref="T:DBConfirm.Core.Factories.Abstract.ITestRunnerFactory"/> to be used to generate the <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/> to be used
            </summary>
        </member>
        <member name="P:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase.TestFramework">
            <summary>
            The <see cref="T:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework"/> to be used for assertions
            </summary>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase.GetParameter(System.String)">
            <summary>
            Gets the value of the specific runtime parameter.  If no value is found, null is returned
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <returns>The value of the parameter, or null if the parameter is not found</returns>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase.BaseInit">
            <summary>
            The initialisation method to set up the <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/> for the test, and making the initial connection to the target database
            </summary>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase.NewConnectionByConnectionStringAsync(System.String)">
            <summary>
            Creates a new connection to the target database, allowing a test to communicate with other databases.  The returned <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/> must be disposed, so it is recommended to wrap it in a using statement
            </summary>
            <param name="connectionString">The connection string of the database to connect to</param>
            <returns>Returns the <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/> for the new database</returns>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase.NewConnectionByConnectionStringNameAsync(System.String)">
            <summary>
            Creates a new connection to the target database, allowing a test to communicate with other databases.  The returned <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/> must be disposed, so it is recommended to wrap it in a using statement
            </summary>
            <param name="connectionStringName">The name of the connection string of the database to connect to</param>
            <returns>Returns the <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/> for the new database</returns>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase.BaseCleanup">
            <summary>
            Disposes the current instance of <see cref="T:DBConfirm.Core.Runners.Abstract.ITestRunner"/>, rolling back the transaction and closing the connection
            </summary>
        </member>
        <member name="P:DBConfirm.Core.TestFrameworks.Abstract.BaseTestBase.Comparisons">
            <summary>
            Facade to build data comparison objects, used to test comparisons with more flexibility
            </summary>
        </member>
        <member name="T:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework">
            <summary>
            The interface for a test framework, used to allow framework-dependent assertions and errors to be used
            </summary>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.AreEqual(System.Object,System.Object,System.String,System.String[])">
            <summary>
            Asserts that two objects are equal, including type
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.AreNotEqual(System.Object,System.Object,System.String,System.String[])">
            <summary>
            Asserts that two objects are not equal, including type
            </summary>
            <param name="notExpected">The value that is not expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.Contains``1(System.Collections.Generic.List{``0},``0,System.String,System.String[])">
            <summary>
            Asserts that the element exists in the collection
            </summary>
            <typeparam name="T">The type of object contained within the list</typeparam>
            <param name="collection">The collection in which to search for the element</param>
            <param name="element">The element that is expected to be found in the collection</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.DoesNotContain``1(System.Collections.Generic.List{``0},``0,System.String,System.String[])">
            <summary>
            Asserts that the element does not exist in the collection
            </summary>
            <typeparam name="T">The type of object contained within the list</typeparam>
            <param name="collection">The collection in which to search for the element</param>
            <param name="element">The element that is not expected to be found in the collection</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.IsTrue(System.Boolean,System.String,System.String[])">
            <summary>
            Asserts that the condition is true
            </summary>
            <param name="condition">The condition the test expects to be true</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.IsInstanceOfType(System.Object,System.Type,System.String,System.String[])">
            <summary>
            Asserts that the object is of the expected type
            </summary>
            <param name="value">The actual value to test</param>
            <param name="expectedType">The expected type</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.Matches(System.String,System.Text.RegularExpressions.Regex,System.String,System.String[])">
            <summary>
            Asserts that the value matches the Regex pattern
            </summary>
            <param name="value">The actual value to test</param>
            <param name="pattern">The Regex pattern that is expected to match</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.StartsWith(System.String,System.String,System.String,System.String[])">
            <summary>
            Asserts that the value starts with the expected string
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expected">The string with which the value is expected to start</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.EndsWith(System.String,System.String,System.String,System.String[])">
            <summary>
            Asserts that the value ends with the expected string
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expected">The string with which the value is expected to end</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.Contains(System.String,System.String,System.String,System.String[])">
            <summary>
            Asserts that the value contains with the expected string
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expected">The string with which the value is expected to contain</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.String[])">
            <summary>
            Asserts that the value does not match the Regex pattern
            </summary>
            <param name="value">The actual value to test</param>
            <param name="pattern">The Regex pattern that is expected not to match</param>
            <param name="message">The message to include in the exception when the assertion fails. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="M:DBConfirm.Core.TestFrameworks.Abstract.ITestFramework.Fail(System.String,System.String[])">
            <summary>
            Triggers an immediate failure of the test
            </summary>
            <param name="message">The message to include in the exception. The message is shown in test results</param>
            <param name="parameters">An array of parameters to use when formatting message</param>
        </member>
        <member name="T:DBConfirm.Core.Validation.ValueValidation">
            <summary>
            Static class to handle all assertions and validations
            </summary>
        </member>
        <member name="M:DBConfirm.Core.Validation.ValueValidation.Assert(DBConfirm.Core.TestFrameworks.Abstract.ITestFramework,System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            <para>Asserts that the value is correct, according to the expected value.</para>
            <para>Where the expected value is a native type, object equality is used as the test.  Where the expected value is an <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object, the specific <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> assertion logic is used</para>
            </summary>
            <param name="testFramework">The test framework to use for assertions</param>
            <param name="expectedValue">The expected value.  This can be either a native type or an <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object</param>
            <param name="value">The value to test</param>
            <param name="messagePrefix">The prefix of the message to use during assertion failure</param>
            <param name="useDBNull">Whether null values should be converted to DBNull</param>
        </member>
        <member name="M:DBConfirm.Core.Validation.ValueValidation.Validate(System.Object,System.Object)">
            <summary>
            <para>Validates whether the value is correct, according to the expected value.  No errors are raised during this call, so it can be used without risk of the test failing.</para>
            <para>Where the expected value is a native type, object equality is used as the test.  Where the expected value is an <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object, the specific <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> assertion logic is used</para>
            </summary>
            <param name="expectedValue">The expected value.  This can be either a native type or an <see cref="T:DBConfirm.Core.Comparisons.Abstract.IComparison"/> object</param>
            <param name="value">The value to test</param>
            <returns>Returns whether the value passes the assertion test</returns>
        </member>
    </members>
</doc>
